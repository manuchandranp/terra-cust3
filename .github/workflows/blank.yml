name: oidc-poc
on:
    push:
        branches:
            - '*'
jobs:
    auth:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - name: Get id token
              run: |
                    ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                    "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
                    echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
                    echo "$ID_TOKEN"
            - name: Exchange token with access
              env:
                    ID_TOKEN: ${{env.ID_TOKEN}}
                    JFROG_PLATFORM_URL: https://hts2.jfrog.io
              run: |
                    ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://hts2.jfrog.io/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"jfrog-github\"}" | jq .access_token | tr -d '"')
                    echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV
            - name: list token
              env:
                 OIDC_AUDIENCE: 'github'
                 OIDC_PROVIDER: 'jfrog-github'
                 ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
              run: |
                    RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST -H "Content-type: application/json" https://hts2.jfrog.io/access/api/v1/oidc/token -d \
                    '{"grant_type": "urn:ietf:params:oauth:grant-type:token-exchange","subject_token_type":"urn:ietf:params:oauth:token-type:id_token","subject_token": "${{ env.ID_TOKEN }}","provider_name": "${{ env.OIDC_PROVIDER }}"}')
                    echo "API Response:"
                    #List token
                    echo "$RESPONSE"
                           # 1. Create the .terraform.d directory if it doesn't exist (Terraform standard location)
                    mkdir -p ~/.terraform.d
          
                     # 2. Define the path to the credentials file
                     CREDENTIALS_FILE="$HOME/.terraform.d/credentials.tfrc.json"
          
                     # 3. Create the JSON content, injecting the ACCESS_TOKEN
                     #    The 'hts2.jfrog.io' must exactly match the host in your module source.
                    cat << EOF > ${CREDENTIALS_FILE}
                        {
                          "credentials": {
                             "hts2.jfrog.io": {
                              "token": "$ACCESS_TOKEN"
                                                }
                                               }
                                           }
                     EOF
          
     
                     cat $HOME/.terraform.d/credentials.tfrc.json
                     echo "Successfully configured Artifactory token in ${CREDENTIALS_FILE}" 
